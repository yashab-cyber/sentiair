#!/usr/bin/env python3
"""
Example script showing how to use Sentinair programmatically
This demonstrates the basic API usage for integration with other systems
"""

import sys
import time
from pathlib import Path

# Add the parent directory to the path so we can import sentinair modules
sys.path.insert(0, str(Path(__file__).parent.parent))

from utils.config import Config
from core.engine import SentinairEngine
from alerts.alert_manager import AlertManager

def basic_monitoring_example():
    """Basic monitoring example"""
    print("=== Basic Monitoring Example ===")
    
    # Load configuration
    config = Config("config/default.yaml")
    
    # Initialize the detection engine
    engine = SentinairEngine(config)
    
    # Start monitoring
    print("Starting monitoring...")
    engine.start()
    
    try:
        # Monitor for 30 seconds
        print("Monitoring for 30 seconds...")
        time.sleep(30)
        
        # Get status
        status = engine.get_status()
        print(f"System Status: {'Running' if status['running'] else 'Stopped'}")
        print(f"Model Trained: {status['model_trained']}")
        print(f"Events Queued: {status['events_queued']}")
        
        # Get recent alerts
        alerts = engine.get_recent_alerts(hours=1)
        print(f"Alerts in last hour: {len(alerts)}")
        
        for alert in alerts[:5]:  # Show first 5 alerts
            print(f"  - {alert.get('severity', 'unknown').upper()}: {alert.get('description', 'No description')}")
            
    finally:
        # Always stop monitoring
        print("Stopping monitoring...")
        engine.stop()
        
def custom_alert_handling():
    """Example of custom alert handling"""
    print("\n=== Custom Alert Handling Example ===")
    
    config = Config("config/default.yaml")
    alert_manager = AlertManager(config)
    
    # Create a custom alert
    alert_data = {
        'timestamp': time.time(),
        'event_type': 'custom_test',
        'severity': 'medium',
        'description': 'This is a test alert generated by the example script',
        'confidence': 0.8,
        'additional_data': {
            'source': 'example_script',
            'test_parameter': 'example_value'
        }
    }
    
    # Create the alert
    alert_id = alert_manager.create_alert(alert_data)
    print(f"Created alert with ID: {alert_id}")
    
    # Retrieve recent alerts
    recent_alerts = alert_manager.get_recent_alerts(hours=1)
    print(f"Total recent alerts: {len(recent_alerts)}")
    
    # Acknowledge the alert we just created
    if alert_id:
        alert_manager.acknowledge_alert(alert_id)
        print(f"Acknowledged alert {alert_id}")

def configuration_example():
    """Example of configuration management"""
    print("\n=== Configuration Management Example ===")
    
    config = Config("config/default.yaml")
    
    # Display current settings
    print("Current ML Model Type:", config.get('ml.model_type'))
    print("Current Anomaly Threshold:", config.get('detection.anomaly_threshold'))
    print("Current Training Interval:", config.get('detection.training_interval_hours'))
    
    # Modify settings (for demonstration)
    original_threshold = config.get('detection.anomaly_threshold')
    config.set('detection.anomaly_threshold', 0.8)
    print(f"Changed anomaly threshold from {original_threshold} to {config.get('detection.anomaly_threshold')}")
    
    # Restore original setting
    config.set('detection.anomaly_threshold', original_threshold)
    print(f"Restored anomaly threshold to {config.get('detection.anomaly_threshold')}")

def stealth_mode_example():
    """Example of stealth mode operation"""
    print("\n=== Stealth Mode Example ===")
    
    config = Config("config/default.yaml")
    
    # Check if stealth mode is configured
    has_admin_hash = bool(config.get('system.admin_password_hash'))
    print(f"Admin password configured: {has_admin_hash}")
    
    if has_admin_hash:
        print("Stealth mode is available")
        print("To run in stealth mode, use: python main.py --mode stealth --stealth-key <your_password>")
    else:
        print("Stealth mode not configured. Run setup.py to configure admin password.")

if __name__ == "__main__":
    print("Sentinair API Examples")
    print("=" * 50)
    
    try:
        basic_monitoring_example()
        custom_alert_handling()
        configuration_example()
        stealth_mode_example()
        
        print("\n" + "=" * 50)
        print("Examples completed successfully!")
        
    except KeyboardInterrupt:
        print("\nExamples interrupted by user")
    except Exception as e:
        print(f"\nError running examples: {e}")
        import traceback
        traceback.print_exc()
